{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fswiss\fcharset0 ArialMT;\f4\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red255\green255\blue10;\red109\green109\blue109;
\red23\green23\blue23;\red70\green137\blue204;\red202\green202\blue202;\red140\green211\blue254;\red194\green126\blue101;
\red0\green0\blue0;\red183\green111\blue179;\red212\green214\blue154;\red66\green179\blue255;\red89\green138\blue67;
\red251\green2\blue255;\red0\green0\blue0;\red46\green49\blue51;\red255\green255\blue255;\red167\green197\blue152;
\red67\green192\blue160;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\cssrgb\c99942\c98555\c0;\cssrgb\c50196\c50196\c50196;
\cssrgb\c11765\c11765\c11765;\cssrgb\c33725\c61176\c83922;\cssrgb\c83137\c83137\c83137;\cssrgb\c61176\c86275\c99608;\cssrgb\c80784\c56863\c47059;
\cssrgb\c0\c0\c0;\cssrgb\c77255\c52549\c75294;\cssrgb\c86275\c86275\c66667;\cssrgb\c30980\c75686\c100000;\cssrgb\c41569\c60000\c33333;
\cssrgb\c100000\c25279\c100000;\csgray\c0\c0;\cssrgb\c23529\c25098\c26275;\cssrgb\c100000\c100000\c100000;\cssrgb\c70980\c80784\c65882;
\cssrgb\c30588\c78824\c69020;}
\margl1440\margr1440\vieww12000\viewh10300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The server just send a single html page to the browser for the website to run fully and then react takes over to manage the whole website in the browser including website data and user interactivity.\
Navigate from page to page by clicking links in the website, but the new pages are not sent by the server instead react changes all the content in the browser depending on the route.\
\
Will learn:\
Using state \
The react router\
How and where to fetch data \
 How to use react hooks like you state and use effect    create a custom hook\
\
Download Simple React Snippets in VScode \
\
Use emmet inside react components when creating react templates in react jsx edit the settings for emmet\
\
npx create-react-app name***\
\
1.node_modules: all project dependencies including the react library and any other package or library we installed \
2.public folder: all the public files public to the browser \'97> index.html: this is the one html file that server to the browser and then all of the react code is injected into this one file (
\f1 \'ca\'d7\'d2\'b3\'c8\'eb\'bf\'da\'ce\'c4\'bc\'fe
\f0 ) \'97>\
<div id=\'93roo\'94></div>\
3.src folder: react components; App.js: the root component, there is a function return the all the content we saw on the HTML its a html template but actully is called jsx; index.js: is the kickstart of App, responsible for taking all of react components and mounting them to the DOM (take <APP /> component and rendering it to the DOM and by root div);\
Delete App.text.js and reportWebVitals.js, setupTests.js\
4. .gitignore file: in case of using version control with git\
5. package.json:  list all the dependencies of the App in the node-modules; scripts\
\
\
Preview: use the script in the package.json file \'97> npm run start in terminal\
\
App.js\'97><div className=\'93App\'94> className means an html class and that is the div that has been injected into html  so in the Index.js file take the App component and rendering to the DOM inside the root elements\
\
\cf2 \cb3 React Components:\cf0 \cb1 \
Create the components and which are rendered to the DOM and shown in the web page\
Components contain Template(make up the html) and Logic(Javascript)\
Begin with Application only have one single component is App which is rendered by index.js file to the poison id=\'93root\'94 in the index.html file.  \
\
JSX allows to create these html style templates and components and in the background a transpiler called babel convert all of this jsx template into html when save file and it renders that html to the DOM. Use className in jsx instead of class but when it translated to html file it translated to class\
\
div.content\'97> auto create 
\f2 \cf4 \cb5 \expnd0\expndtw0\kerning0
<\cf6 div\cf7  \cf8 className\cf7 =\cf9 "content"\cf4 ></\cf6 div\cf4 >\cf7 \cb1 \
\
\cf10 Delete the template begin App\'92s logo \
\
At the end of App.js we can see a \cf11 \cb5 export\cf7  \cf11 default\cf7  \cf12 App\cf7 ;\cb1  \cf10 we always export component function and that\'92s so we can use it in other files for example, in the index.js we \cf11 \cb5 import\cf7  \cf8 App\cf7  \cf11 from\cf7  \cf9 './App'\cf7 ;\cb1 \
\
\
\cf2 \cb3 Dynamic Values in Templates:\cb1 \
\cf10 Create a variable in the component function before return template\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf6 h1\cf4 >\cf7 App Component\cf4 </\cf6 h1\cf4 >\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \'97> \cf6 \cb5 const\cf7  \cf13 title\cf7  = \cf9 'welcome to the new blog'\cf7 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf6 h1\cf4 >\cf6 \{\cf7  \cf13 title\cf7  \cf6 \}\cf4 </\cf6 h1\cf4 >\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 Numbers strings and arrays fine but booleans and objects can\'92t\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf10 \'d7\'a2\'ca\'cd\'a3\'ba
\f2  \cf6 \cb5 \{\cf14 /* <p>\{ person \}</p>*/\cf6 \}\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 Put the dynamic value in \{\}\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 Multiple Components:\cb1 \
App.js\'97> App the first component that gets rendered to the Dom and it sits very top of our application.  All of the later created components are nested inside this root component there is a component tree.\
\
Create a new component: 1.create a new .js file.\cf2  A component is just a function which return a jsx template and that function is exported at the bottom of the file.\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 Using snippet to create a functional component\'97> sfc and then tab it will create a stateless functional component\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7   = () \cf6 =>\cf7  \{\cb1 \
\cb5     \cf11 return\cf7  (  );\cb1 \
\cb5 \}\cb1 \
\cb5  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb5 export\cf7  \cf11 default\cf7  ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 **Set up multiple pages should be work with routing \
2.Import the new component into App root components and then nest it somewhere inside the App.js template \
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 Adding Styles:\cb1 \
The line \cf11 \cb5 import\cf7  \cf9 './App.css'\cf7 ;\cb1  \cf10 will not only work on the component but also work on what show on the web page too\'97> so could use css modules to scope your styles use styled components \
Delete the App.css and the import in App.js just use index.css for all.\
\
Inline style <a style=\{\{\}\}></a> \{dynamic value\} \{\{ the value is JavaScript object\}\}.\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf6 a\cf7  \cf8 href\cf7 =\cf9 "/creta"\cf7  \cf8 style\cf7 =\cf6 \{\cf7 \{\cb1 \
\cb5                     \cf8 color:\cf7  \cf9 "white"\cf7 ,\cb1 \
\cb5                     \cf8 backgroundColor:\cf7  \cf9 '#f1356d'\cf7 ,\cb1 \
\cb5                     \cf8 borderRadius:\cf7  \cf9 '8px'\cf7 \cb1 \
\cb5                 \}\cf6 \}\cf4 >\cf7 New Blog\cf4 </\cf6 a\cf4 >\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 Click Events:\cb1 \
1.There are a lot of events: hover event click events keyboard events etc\
2.\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf6 button\cf7  \cf8 onClick\cf7 =\cf6 \{\cf12 handleClick\cf7 ()\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1  \cf10 this way will invoke the function auto even user doesn\'92t click\
\'97> \cf4 \cb5 <\cf6 button\cf7  \cf8 onClick\cf7 =\cf6 \{\cf12 handleClick\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 Write the handling function inside the component\'92s function before return\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 handleClick\cf7  = () \cf6 =>\cf7  \{\cb1 \
\cb5         \cf8 console\cf7 .\cf12 log\cf7 (\cf9 'hello clicked'\cf7 );\cb1 \
\cb5     \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 3.\
\'97>if we wanna passing argument to the handling function\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 handleClick\cf7  = (\cf8 name\cf7 ) \cf6 =>\cf7  \{\cb1 \
\cb5         \cf8 console\cf7 .\cf12 log\cf7 (\cf9 'hello '\cf7 +\cf8 name\cf7 +\cf9 ' clicked'\cf7 );\cb1 \
\cb5     \}\cb1 \
\
\cf4 \cb5 <\cf6 button\cf7  \cf8 onClick\cf7 =\cf6 \{\cf12 handleClick\cf7 (\cf9 'tom'\cf7 )\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf15 But this way () invoke the function directly automatically\'97> wrap the \'93handleClick(\'91tom\'92)\'94 inside an anonymous function () => \{\}\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf6 button\cf7  \cf8 onClick\cf7 = \cf6 \{\cf7 () \cf6 =>\cf7  \{\cb1 \
\cb5                 \cf12 handleClick\cf7 (\cf9 'tom'\cf7 )\cb1 \
\cb5             \}\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 4.event object or event parameter we automatically access to when event occurs\
e\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 handleClick\cf7  = (\cf8 name\cf7 , \cf8 e\cf7 ) \cf6 =>\cf7  \{\cb1 \
\cb5         \cf8 console\cf7 .\cf12 log\cf7 (\cf9 'hello '\cf7 +\cf8 name\cf7 +\cf9 ' clicked'\cf7 , \cf8 e\cf7 .\cf8 target\cf7 );\cb1 \
\cb5     \}\cb1 \
\cb5     \cf6 const\cf7  \cf12 handleClickAgain\cf7  = (\cf8 e\cf7 ) \cf6 =>\cf7  \{\cb1 \
\cb5         \cf8 console\cf7 .\cf12 log\cf7 (\cf9 'hello again'\cf7 , \cf8 e\cf7 );\cb1 \
\cb5     \}\cb1 \
\
\cf4 \cb5 <\cf6 button\cf7  \cf8 onClick\cf7 = \cf6 \{\cf7 (\cf8 e\cf7 ) \cf6 =>\cf7  \cf12 handleClick\cf7 (\cf9 'tom'\cf7 ,\cf8 e\cf7 )\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1 \
\cf4 \cb5 <\cf6 button\cf7  \cf8 onClick\cf7 = \cf6 \{\cf12 handleClickAgain\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1 \
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 Using State(useState hook):\cb16 \
State of a component means a data being used in that component at that point of time. State could be an array of values, booleans, strings, objects etc.\
Some variables we want it changed or react with user.\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 Home\cf7  = () \cf6 =>\cf7  \{\cb1 \
\
\cb5     \cf6 let\cf7  \cf8 name\cf7 =\cf9 'Tom'\cf7 ;\cb1 \
\
\cb5     \cf6 const\cf7  \cf12 handleClickAgain\cf7  = () \cf6 =>\cf7  \{\cb1 \
\cb5        \cf8 name\cf7 = \cf9 'tom has changed'\cf7 ; \cb1 \
\cb5     \}\cb1 \
\
\cb5     \cf11 return\cf7  (  \cb1 \
\cb5         \cf4 <\cf6 div\cf7  \cf8 className\cf7 =\cf9 "home"\cf4 >\cf7 \cb1 \
\cb5             \cf4 <\cf6 h2\cf4 >\cf7 Home Page\cf4 </\cf6 h2\cf4 >\cf7 \cb1 \
\cb5             \cf4 <\cf6 p\cf4 >\cf6 \{\cf7  \cf8 name\cf7  \cf6 \}\cf4 </\cf6 p\cf4 >\cf7 \cb1 \
\cb5             \cf4 <\cf6 button\cf7  \cf8 onClick\cf7 = \cf6 \{\cf12 handleClickAgain\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1 \
\cb5         \cf4 </\cf6 div\cf4 >\cf7 \cb1 \
\cb5     );\cb1 \
\cb5 \}\cb1 \
\cb5  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb5 export\cf7  \cf11 default\cf7  \cf12 Home\cf7 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf15 This code doesn\'92t make the name variable changed is not reactive.\
\'97>use hook and that hook is called use state, use state hook  to make a reactive value \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb5 import\cf7  \{ \cf8 useState\cf7  \} \cf11 from\cf7  \cf9 'react'\cf7 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  [\cf13 name\cf7 , \cf12 setName\cf7 ] = \cf12 useState\cf7 (\cf9 'Tom'\cf7 );\cf10 \cb16   the first value is initial value and the second is a function we can use to change the value\cf7 \cb1 \
\cb5     \cf6 const\cf7  \cf12 handleClickAgain\cf7  = () \cf6 =>\cf7  \{\cb1 \
\cb5        \cf12 setName\cf7 (\cf9 'Tom changed to Jerry'\cf7 );\cb1 \
\cb5     \}\cb1 \
\
\cf4 \cb5 <\cf6 p\cf4 >\cf6 \{\cf7  \cf13 name\cf7  \cf6 \}\cf4 </\cf6 p\cf4 >\cf7 \cb1 \
\cb5             \cf4 <\cf6 button\cf7  \cf8 onClick\cf7 = \cf6 \{\cf12 handleClickAgain\cf6 \}\cf4 >\cf7 Click Me\cf4 </\cf6 button\cf4 >\cf7 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 The data type of the state can be an array, an object, boolean, number \
\
\
\
\
\
\cb3 React Develop Tools\cb1  for Chrome: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf17 \cb18 You will get two new tabs in your Chrome DevTools: "
\f4 \uc0\u9883 \u65039 
\f3  Components" and "
\f4 \uc0\u9883 \u65039 
\f3  Profiler".\
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf10 \cb3 Lists of Data, Outputting Lists:\cb16 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  [\cf13 blogs\cf7 , \cf12 setBlogs\cf7 ] = \cf12 useState\cf7 ([\cb1 \
\cb5         \{ \cf8 title:\cf7  \cf9 'My new website'\cf7 , \cf8 body:\cf7  \cf9 'lorem ipsum...'\cf7 , \cf8 author:\cf7  \cf9 'mario'\cf7 , \cf8 id:\cf7  \cf19 1\cf7  \},\cb1 \
\cb5         \{ \cf8 title:\cf7  \cf9 'Welcome party!'\cf7 , \cf8 body:\cf7  \cf9 'lorem ipsum...'\cf7 , \cf8 author:\cf7  \cf9 'yoshi'\cf7 , \cf8 id:\cf7  \cf19 2\cf7  \},\cb1 \
\cb5         \{ \cf8 title:\cf7  \cf9 'Web dev top tips'\cf7 , \cf8 body:\cf7  \cf9 'lorem ipsum...'\cf7 , \cf8 author:\cf7  \cf9 'mario'\cf7 , \cf8 id:\cf7  \cf19 3\cf7  \}\cb1 \
\cb5       ]);\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf17 \cb18 Cycle through this array using Javascript in the template and output a bit of template for each one.  We can write js inside \{..\}\
Use map() method which fires a callback function for each item. Each time around we  want to return a bit of jsx template inside(..)
\f3 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 Key attribute\cf17 : this key property react use to track of each item in the DOM as it outputs it , so if data changes at any point  if we remove or add new items to the array react can keep track of those items.\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf6 \cb5 const\cf7  [\cf13 blogs\cf7 , \cf12 setBlogs\cf7 ] = \cf12 useState\cf7 ([\cb1 \
\cb5         \{ \cf8 title:\cf7  \cf9 'My new website'\cf7 , \cf8 body:\cf7  \cf9 'lorem ipsum...'\cf7 , \cf8 author:\cf7  \cf9 'mario'\cf7 , \cf8 id:\cf7  \cf19 1\cf7  \},\cb1 \
\cb5         \{ \cf8 title:\cf7  \cf9 'Welcome party!'\cf7 , \cf8 body:\cf7  \cf9 'lorem ipsum...'\cf7 , \cf8 author:\cf7  \cf9 'yoshi'\cf7 , \cf8 id:\cf7  \cf19 2\cf7  \},\cb1 \
\cb5         \{ \cf8 title:\cf7  \cf9 'Web dev top tips'\cf7 , \cf8 body:\cf7  \cf9 'lorem ipsum...'\cf7 , \cf8 author:\cf7  \cf9 'mario'\cf7 , \cf8 id:\cf7  \cf19 3\cf7  \}\cb1 \
\cb5       ]);\cb1 \
\
\cb5     \cf11 return\cf7  (  \cb1 \
\cb5         \cf4 <\cf6 div\cf7  \cf8 className\cf7 =\cf9 "home"\cf4 >\cf7 \cb1 \
\cb5             \cf6 \{\cf13 blogs\cf7 .\cf12 map\cf7 ((\cf8 blog\cf7 ) \cf6 =>\cf7  (\cb1 \
\cb5                 \cf4 <\cf6 div\cf7  \cf8 className\cf7 =\cf9 "blog-preview"\cf7  \cf8 key\cf7 =\cf6 \{\cf8 blog\cf7 .\cf8 id\cf6 \}\cf4 >\cf7 \cb1 \
\cb5                     \cf4 <\cf6 h2\cf4 >\cf6 \{\cf8 blog\cf7 .\cf8 title\cf6 \}\cf4 </\cf6 h2\cf4 >\cf7 \cb1 \
\cb5                     \cf4 <\cf6 p\cf4 >\cf7 Written By \cf6 \{\cf7  \cf8 blog\cf7 .\cf8 author\cf6 \}\cf4 </\cf6 p\cf4 >\cf7 \cb1 \
\cb5                 \cf4 </\cf6 div\cf4 >\cf7 \cb1 \
\cb5             ))\cf6 \}\cf7 \cb1 \
\cb5         \cf4 </\cf6 div\cf4 >\cf7 \cb1 \
\cb5     );\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 That how we \cb2 output lists of data in react\cb1 : have a list and store it in useState and  then map through the data and take each item into that as we map through it and we output bit of template of each one. And for each one it has key property  \
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb2 Props:\cb1  several of different components for different pages which is going to use the same logic where we cycling through the blogs and output a blog preview\'97> reusable component\
Pass in different data into the reusable every time use it and in the form of props.\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 BlogList\cf7  = (\cf8 props\cf7 ) \cf6 =>\cf7  \{\cb1 \
\cb5     \cf6 const\cf7  \cf13 blogs\cf7  = \cf8 props\cf7 .\cf8 blogs\cf7 ;\cb1 \
\cb5     \cf6 const\cf7  \cf13 title\cf7  = \cf8 props\cf7 .\cf8 title\cf7 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 OR\cf7 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 BlogList\cf7  = (\{\cf8 blogsData\cf7 ,\cf8 title\cf7 \}) \cf6 =>\cf7  \{\cb1 \
\cb5     \cf14 // const blogsData = props.blogsData;\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 Reuse component \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf20 BlogList\cf7  \cf8 blogsData\cf7 =\cf6 \{\cf13 blogs\cf6 \}\cf7  \cf8 title\cf7 =\cf9 "All Blogs"\cf4 />\cf7 \cb1 \
\cf4 \cb5 <\cf20 BlogList\cf7  \cf8 blogsData\cf7 =\cf6 \{\cf13 blogs\cf7 .\cf12 filter\cf7 ((\cf8 blog\cf7 )\cf6 =>\cf8 blog\cf7 .\cf8 author\cf7 ===\cf9 'mario'\cf7 )\cf6 \}\cf7  \cf8 title\cf7 =\cf9 "Mario's Blogs"\cf4 />\cf7 \cb1 \
\
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 Passing functions as props:\cb16 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 handleDelete\cf7  = (\cf8 id\cf7 ) \cf6 =>\cf7  \{\cb1 \
\cb5           \cf6 const\cf7  \cf13 newBlogs\cf7  = \cf13 blogs\cf7 .\cf12 filter\cf7 (\cf8 blog\cf7  \cf6 =>\cf7  \cf8 blog\cf7 .\cf8 id\cf7  !== \cf8 id\cf7 );  \cf14 //this filter method doesn't change the original array just return a new array\cf7 \cb1 \
\cb5           \cf12 setBlogs\cf7 (\cf13 newBlogs\cf7 );\cb1 \
\cb5     \}\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf20 BlogList\cf7  \cf8 blogsData\cf7 =\cf6 \{\cf13 blogs\cf6 \}\cf7  \cf8 title\cf7 =\cf9 "All Blogs"\cf7  \cf8 handleDelete\cf7 =\cf6 \{\cf12 handleDelete\cf6 \}\cf7  \cf4 />\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 In BlogList.js:\cf7 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 const\cf7  \cf12 BlogList\cf7  = (\{\cf8 blogsData\cf7 ,\cf8 title\cf7 ,\cf8 handleDelete\cf7 \}) \cf6 =>\cf7  \{\cb1 \}\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 <\cf6 button\cf7  \cf8 onClick\cf7 =\cf6 \{\cf7 () \cf6 =>\cf7  \cf12 handleDelete\cf7 (\cf8 blog\cf7 .\cf8 id\cf7 )\cf6 \}\cf8 delete\cf7  \cf8 blog\cf4 ></\cf6 button\cf4 >\cf7 \cb1 \
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 Hook:useEffect\cb16 \
Another hook is useState\
UseEffect hook \cf2 runs a function every render\cf10  of component. When we change the data it re-rendered this to the DOM.\
Access state inside useEffect.\
Be careful  of change state inside useEffect, because you could end up in \cf2 continuous loop of renders\cf10 . Initially the component renders to the DOM \'97> that will trigger the useEffect function to run \'97> then that would update the state \'97> that would trigger a re-render\'97> trigger the useEffect run \'97> change the state \'97> trigger re-render \'85\
Useful for running code need to run every render and can be used for things like fetching data\
\pard\pardeftab720\sl360\partightenfactor0
\cf12 \cb5 useEffect\cf7 ( () \cf6 =>\cf7  \{\cb1 \
\cb5         \cf8 console\cf7 .\cf12 log\cf7 (\cf9 'use effect'\cf7 );\cb1 \
\cb5     \});\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb16 \
\
\
\cb3 useEffect Dependencies:\cb16 \
Dependency array use for using the useEffect function on certain renders. By passing a second argument\
1.[]\
\pard\pardeftab720\sl360\partightenfactor0
\cf12 \cb5 useEffect\cf7 ( () \cf6 =>\cf7  \{\cb1 \
\cb5         \cf8 console\cf7 .\cf12 log\cf7 (\cf9 'use effect'\cf7 );\cb1 \
\cb5     \}, []);\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb16 This empty array guarantees that this useEffect function only runs after the first initial render, if the state changes it doesn\'92t run.\
2.any state values that trigger the useEffect function to run when they change  \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 JSON Server\cf7 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 useEffect is a good place to fetch data from database using an API endpoint because we runs the function when the component first renders initially and then we can use the data\
Create a fake database endpoint using JSON Server, create a new folder data and new file db.json inside\
In the terminal: npx json-server --watch data/db.json --port 8000\
Then get: Resources http://localhost:8000/blogs\
Using a fetch request inside component using different endpoint\
}